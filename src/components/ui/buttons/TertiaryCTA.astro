---
// Define props from Astro
const { title, tabs } = Astro.props;

const searchPlaceholders = {
  employer: "Search by company...",
  salary: "Search by salary range...",
  job: "Search by job title...",
};
---

<!-- Container with three buttons and a search bar below -->
<div class="rounded-lg p-6 w-full max-w-lg shadow-md text-left bg-orange-100 dark:bg-gray-500">
  <div id="button-container" class="flex justify-between mb-4 space-x-4">
    <button class="button flex-1 selected"
      id="employer-btn"
      class="button selected"
      data-type="employer"
    >
      Find Employer
    </button>
    <button class="button flex-1"
      id="salary-btn"
      class="button"
      data-type="salary"
    >
      Salary
    </button>
    <button class="button flex-1"
      id="job-btn"
      class="button"
      data-type="job"
    >
      Job
    </button>
  </div>

  <!-- Search input and button container -->
  <div class="relative w-full">
    <!-- Search Input -->
    <input
      id="search-bar"
      type="text"
      class="w-full px-4 pr-10 py-2 text-sm font-medium text-neutral-600 shadow-sm rounded-lg border border-neutral-200 focus:outline-none focus:ring-2 ring-zinc-500 transition duration-300"
      placeholder="Search by company..." // Default placeholder
    />

    <!-- Search Icon (now functional as a search button) -->
    <div class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer" id="search-icon">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-10 text-orange-500" viewBox="0 0 15 15" fill="currentColor">
        <path fill-rule="evenodd" d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" clip-rule="evenodd" />
      </svg>
    </div>
  </div>

  <!-- JavaScript to trigger search on icon click -->
  <script>
    document.getElementById('search-icon').addEventListener('click', function() {
      const query = document.getElementById('search-bar').value.trim();

      if (query) {
        // Replace the URLs below with your actual search URLs
        window.location.href = `/search?query=${encodeURIComponent(query)}`;
      } else {
      }
    });
  </script>

</div>

<!-- Client-side script for handling the button clicks and changing placeholders -->
<script client:load>
  // Get the buttons and the search bar
  const buttons = document.querySelectorAll('.button');
  const searchBar = document.getElementById('search-bar');
  const searchButton = document.getElementById('search-button');

  let selectedType = 'employer'; // Default selection

  // Function to update the selected button and search placeholder
  buttons.forEach(button => {
    button.addEventListener('click', function () {
      // Remove the 'selected' class from all buttons
      buttons.forEach(btn => btn.classList.remove('selected'));
      
      // Add 'selected' class to the clicked button
      this.classList.add('selected');

      // Update selected type and search bar placeholder
      selectedType = this.getAttribute('data-type');
      const placeholders = {
        employer: 'Search by company...',
        salary: 'Search by salary range...',
        job: 'Search by job title...'
      };
      searchBar.placeholder = placeholders[selectedType];
    });
  });

  // Function to handle the search button click
  searchButton.addEventListener('click', function () {
    const query = searchBar.value.trim();

    if (query) {
      // Redirect based on the selected type
      if (selectedType === 'employer') {
        window.location.href = `/search/employer?q=${encodeURIComponent(query)}`;
      } else if (selectedType === 'salary') {
        window.location.href = `/search/salary?q=${encodeURIComponent(query)}`;
      } else if (selectedType === 'job') {
        window.location.href = `/search/job?q=${encodeURIComponent(query)}`;
      }
    } else {
    }
  });
</script>

<style>
  /* Style for the container */
  .border {
    border: 1px solid #d1d5db;
    border-radius: 0.5rem;
    padding: 1.5rem;
    background-color: white;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  }

  /* Button styles */
  .button {
    padding: 0.75rem 1.25rem;
    font-size: 1rem;
    font-weight: 500;
    color: #374151;
    background-color: #f3f4f6;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    transition: background-color 0.3s, color 0.3s;
    cursor: pointer;
  }

  /* Hover effect for buttons */
  .button:hover {
    background-color: #e5e7eb;
  }

  /* Highlight selected button in light mode */
  .button.selected {
    background-color: orange;
    color: white;
    border-color: orange;
  }

  /* Highlight selected button in dark mode */
  @media (prefers-color-scheme: dark) {
    .button.selected {
      background-color: #ff8c00; /* Darker orange for dark mode */
      color: white;
      border-color: #ff8c00;
    }
  }

  /* Styling for the search button */
  .search-button {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    color: white;
    background-color: orange;
    border: none;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  /* Hover effect for search button */
  .search-button:hover {
    background-color: gray;
  }

  /* Flexbox for aligning elements */
  .flex {
    display: flex;
  }

  .w-full {
    width: 100%;
  }

  .max-w-lg {
    max-width: 36rem; /* Increase the width of the box */
  }
</style>
